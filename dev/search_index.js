var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [PartitionedStructures, M_abstract_part_struct,M_abstract_element_struct,M_internal_elt_vec,M_internal_pv,M_elt_vec,ModElemental_ev,ModElemental_pv,M_elt_mat,M_part_mat,M_part_v,ModElemental_pm,ModElemental_em,M_okoubi_koko,M_frontale, M_1_parallel, M_2_parallel, M_3_parallel, Utils, Link, PartitionedQuasiNewton, PartitionedLOQuasiNewton, ModElemental_elom_bfgs, ModElemental_plom_bfgs, ModElemental_elom_sr1, ModElemental_plom_sr1, ModElemental_plom, Instances, PartMatInterface]","category":"page"},{"location":"reference/#PartitionedStructures.M_internal_elt_vec.Internal_elt_vec","page":"Reference","title":"PartitionedStructures.M_internal_elt_vec.Internal_elt_vec","text":"Type that represents internal element vector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_internal_pv.Internal_pv","page":"Reference","title":"PartitionedStructures.M_internal_pv.Internal_pv","text":"Type that represents internal partitioned vectors.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_internal_pv.rand_ipv-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.M_internal_pv.rand_ipv","text":"new_internal_pv(N,n;nᵢ,T)\n\nDefine an internal partitionned vector of N elemental nᵢ-sized vector simulating a n-sized T-vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_elt_vec.Elt_vec","page":"Reference","title":"PartitionedStructures.M_elt_vec.Elt_vec","text":"Abstract type representing element vectors.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.ModElemental_ev.Elemental_elt_vec","page":"Reference","title":"PartitionedStructures.ModElemental_ev.Elemental_elt_vec","text":"Type that reprenents elemental element vector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.ModElemental_ev.create_eev-Tuple{Vector{Int64}}","page":"Reference","title":"PartitionedStructures.ModElemental_ev.create_eev","text":"create_eev(vector_indices)\n\nCreate a random elemental element vector from vector_indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_ev.eev_from_sparse_vec-Union{Tuple{SparseArrays.SparseVector{T, Y}}, Tuple{Y}, Tuple{T}} where {T, Y}","page":"Reference","title":"PartitionedStructures.ModElemental_ev.eev_from_sparse_vec","text":"eev_from_sparse_vec(sparse_vec)\n\neevfromsparsevec is an interface with SparseArrays.SparseVector. The indices and the values of the elemental element vector are define using findnz(sparsevec).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_ev.new_eev-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_ev.new_eev","text":"new_eev(nie; T, n)\n\nCreate an elemental element vector, with nie randoms values placed at indices within the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_ev.ones_eev-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_ev.ones_eev","text":"ones_eev(nie; T, n)\n\nCreate an elemental element vector, with nie values at 1 placed at indices within the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_ev.sparse_vec_from_eev-Union{Tuple{Elemental_elt_vec{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.ModElemental_ev.sparse_vec_from_eev","text":"sparse_vec_from_eev(eev)\n\nCreate a sparse vector from the element element vector eev.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_ev.specific_ones_eev-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_ev.specific_ones_eev","text":"specific_ones_eev(nie, index; T, mul)\n\nCreate an elemental element vector, with nie randoms values multiplied by mul placed at indices in range index:index+nie, with .\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.Elemental_pv","page":"Reference","title":"PartitionedStructures.ModElemental_pv.Elemental_pv","text":"A type that represent elemental partitioned vector.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_abstract_part_struct.initialize_component_list!-Tuple{Elemental_pv}","page":"Reference","title":"PartitionedStructures.M_abstract_part_struct.initialize_component_list!","text":"initialize_component_list!(epm)\n\ninitializecomponentlist! Build for each index i (∈ {1,...,n}) the list of the blocs using i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_v.build_v!-Union{Tuple{Elemental_pv{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_part_v.build_v!","text":"build_v!(pv)\n\nBuild from pv the vector v according to the information of each {evᵢ}ᵢ\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.add_epv!-Union{Tuple{T}, Tuple{Elemental_pv{T}, Elemental_pv{T}}} where T<:Number","page":"Reference","title":"PartitionedStructures.ModElemental_pv.add_epv!","text":"add_epv!(epv1,epv2)\n\nBuild in place of epv2 the addition of epv1 and epv2. Concretely each corresponding elemental vector will be add. \n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.create_epv-Union{Tuple{Array{SparseArrays.SparseVector{T, Y}, 1}}, Tuple{Y}, Tuple{T}} where {T, Y}","page":"Reference","title":"PartitionedStructures.ModElemental_pv.create_epv","text":"create_elemental_pv(elt_ev_set)\n\ncreate an elemental partitioned vector from a collection (vector) of: sparse vector, elemental element vector or a vector of indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.epv_from_epv!-Union{Tuple{T}, Tuple{Elemental_pv{T}, Elemental_pv{T}}} where T","page":"Reference","title":"PartitionedStructures.ModElemental_pv.epv_from_epv!","text":"epv_from_epv!(evp1, epv2)\n\nSet the elemental partitioned vector epv1 to epv2.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.epv_from_v!-Union{Tuple{T}, Tuple{Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.ModElemental_pv.epv_from_v!","text":"epv_from_v!(epv, x)\n\nSet the values of the element partitioned vector epv to x. Usefull to define Uᵢ x, ∀ x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.epv_from_v-Union{Tuple{T}, Tuple{Vector{T}, Elemental_pv{T}}} where T","page":"Reference","title":"PartitionedStructures.ModElemental_pv.epv_from_v","text":"epv_from_v(x, epv)\n\nDefine a new elemental partitioned vector from x that have the same structure than epv. The value of each elemental element vector comes from the corresponding indices of x. Usefull to define Uᵢ x, ∀ x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.minus_epv!-Union{Tuple{Elemental_pv{T}}, Tuple{T}} where T<:Number","page":"Reference","title":"PartitionedStructures.ModElemental_pv.minus_epv!","text":"minus_epv!(epv)\n\nBuild in place the -epv, by inversing the value of each elemental element vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.ones_kchained_epv-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pv.ones_kchained_epv","text":"ones_kchained_epv(N, k; T)\n\nConstruct a N-partitionned k-sized vector such as n = N+k.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pv.rand_epv-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pv.rand_epv","text":"new_elemental_pv(N,n;nᵢ,T)\n\nDefine an elemental partitionned vector of N elemental nᵢ-sized vector simulating a n-sized T-vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_elt_mat.Elt_mat","page":"Reference","title":"PartitionedStructures.M_elt_mat.Elt_mat","text":"Abstract type representing element matrix\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_elt_mat.get_Bie-Tuple{T} where T<:Elt_mat","page":"Reference","title":"PartitionedStructures.M_elt_mat.get_Bie","text":"get_Bie(elt_mat)\n\nReturn the element matrix elt_mat.Bie.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.Part_LO_mat","page":"Reference","title":"PartitionedStructures.M_part_mat.Part_LO_mat","text":"Abstract type representing partitioned matrix using linear operators\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_part_mat.Part_mat","page":"Reference","title":"PartitionedStructures.M_part_mat.Part_mat","text":"Abstract type representing partitioned matrix\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_part_mat.get_spm-Tuple{T} where T<:Part_mat","page":"Reference","title":"PartitionedStructures.M_part_mat.get_spm","text":"get_spm(pm)\n\nget_spm(pm, i, j)\n\nGet either the sparse matrix associated to the partitioned matrix pm or ones ot its element at coordinate [i,j].\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.hard_reset_L!-Tuple{T} where T<:Part_mat","page":"Reference","title":"PartitionedStructures.M_part_mat.hard_reset_L!","text":"hard_reset_L!(pm)\n\nReset the sparse matrix pm.L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.hard_reset_spm!-Tuple{T} where T<:Part_mat","page":"Reference","title":"PartitionedStructures.M_part_mat.hard_reset_spm!","text":"hard_reset_spm!(pm)\n\nReset the sparse matrix pm.spm.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.reset_L!-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.M_part_mat.reset_L!","text":"reset_L!(pm)\n\nSet the elements of sparse matrix pm.L to 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.reset_spm!-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.M_part_mat.reset_spm!","text":"reset_spm!(pm)\n\nSet the elements of sparse matrix pm.spm to 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_v.Part_v","page":"Reference","title":"PartitionedStructures.M_part_v.Part_v","text":"Abstract type representing partitioned vectors.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_part_v.add_v!-Union{Tuple{T}, Tuple{Y}, Tuple{T, Int64, Y}} where {Y, T<:Part_v{Y}}","page":"Reference","title":"PartitionedStructures.M_part_v.add_v!","text":"add_v!(pv, i, value)\n\nadd_v!(pv, indices, values)\n\nAdd value (resp values) to the vector associated to the partitioned vector pv.v at the indice i (resp indices).\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_v.build_v-Tuple{T} where T<:Part_v","page":"Reference","title":"PartitionedStructures.M_part_v.build_v","text":"build_v(pv)\n\nBuild the vector v from the partitionned vector pv. Call specialised method depending the type of the element vector inside pv For now if there is mix of elemental and internal element vectors it must be previously transform as internal partitioned vector.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_v.set_v!-Union{Tuple{T}, Tuple{Y}, Tuple{T, Vector{Y}}} where {Y, T<:Part_v{Y}}","page":"Reference","title":"PartitionedStructures.M_part_v.set_v!","text":"set_v!(pv, vec)\n\nset_v!(pv, index, value)\n\nSet to value the vector associated to the partitioned vector pv.v at the indice index. Set to vec the vector associated to the partitioned vector pv.v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.Elemental_pm","page":"Reference","title":"PartitionedStructures.ModElemental_pm.Elemental_pm","text":"Symmetric elemental partitioned matrix\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.permute!-Union{Tuple{T}, Tuple{Elemental_pm{T}, Vector{Int64}}} where T","page":"Reference","title":"Base.permute!","text":"permute!(epm, p)\n\nApply the permutation p to the elemental partitionned matrix epm. The permutation is applied to each eem via indices. The current epm permutation is stored in epm.permutation.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_abstract_part_struct.initialize_component_list!-Tuple{Elemental_pm}","page":"Reference","title":"PartitionedStructures.M_abstract_part_struct.initialize_component_list!","text":"initialize_component_list!(epm)\n\nBuild for each index i (∈ {1, ..., n}) the list of the elemental element matrices using i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.set_spm!-Union{Tuple{Elemental_pm{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_part_mat.set_spm!","text":"set_spm!(epm)\n\nBuild the sparse matrix epm.spm from the blocs epm.eem_set, according to the elemental element matrices eem.indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.correlated_var-Union{Tuple{T}, Tuple{Elemental_pm{T}, Int64}} where T","page":"Reference","title":"PartitionedStructures.ModElemental_pm.correlated_var","text":"correlated_var(epm, i)\n\nGet the linked variables to i depending the structure of epm.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.identity_epm-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.identity_epm","text":"identity_epm(N, n; T=T, nie)\n\nCreate a partitionned matrix of type T. The partitionned matrix possess N identity elemental element matrices of size nie with randoms positions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.identity_epm-Tuple{Vector{Vector{Int64}}}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.identity_epm","text":"identity_epm(element_variables, N, n; T=T)\n\nCreate a partitionned matrix of type T. The partitionned matrix possess N identity elemental element matrices based from the indices of each component of element_variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.n_i_SPS-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.n_i_SPS","text":"n_i_SPS(n)\n\nDefine a elemental partitioned matrix of size n. The partitioned matrix is composed by approximatively (n/nie)*2 elemental element matrices. The partitioned matrix is generally not singular.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.n_i_sep-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.n_i_sep","text":"n_i_sep(n; T=T, nie=nie, mul=mul)\n\nDefine a partitioned nᵢ bloc separable matrix. Each elemental element matrix is composed of 1 except the diagonal that have value mul.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.ones_epm-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.ones_epm","text":"ones_epm(N, n; T=T, nie=nie)\n\nCreate a partitionned matrix of type T. The partitionned matrix possess N elemental element matrices ones(nie, nie) whose positions are randoms. The partitionned matrix created may be singular.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.ones_epm_and_id-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.ones_epm_and_id","text":"ones_epm_and_id(N, n; T=T, nie=nie)\n\nCreate a partitionned matrix of type T. The partitionned matrix possess N+n elemental element matrices. N elemental element matrices ones(nie, nie) whose positions are randoms. The remaining n elemental element matrices are of value [1] , they are all over the diagonal. This way, the partitionned matrix is generally not singular.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_pm.part_mat-Tuple{}","page":"Reference","title":"PartitionedStructures.ModElemental_pm.part_mat","text":"part_mat(;n=n, T=T, nie=nie, overlapping=overlapping, mul=mul)\n\nDefine a elemental partitioned matrix form with nie elemental element matrices. Each elemental element matrix overlap the previous one and the next one by overlapping.\t\t\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_em.create_id_eem-Tuple{Vector{Int64}}","page":"Reference","title":"PartitionedStructures.ModElemental_em.create_id_eem","text":"create_id_eem(indices; T=T)\n\nCreate an nie identity elemental element matrix of type T at the indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_em.fixed_ones_eem-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_em.fixed_ones_eem","text":"fixed_ones_eem(index, nie; type=T, mul=mul)\n\nCreate an nie elemental element matrix of type T at indices index:index+nie-1. All element have the value 1 except the diagonal that have the value mul, it is use to define diagonal dominant matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_em.identity_eem-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_em.identity_eem","text":"identity_eem(nie; T=T, n=n)\n\nCreate an nie identity elemental element matrix of type T at random indices in the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_em.one_size_bloc-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_em.one_size_bloc","text":"one_size_bloc(i)\n\nDefine a elemental element matrix of type T of size one at the index i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_em.ones_eem-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_em.ones_eem","text":"ones_eem(nie; T=T, n=n)\n\nCreate an nie ones elemental element matrix of type T at random indices in the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_okoubi_koko.okoubi!-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.M_okoubi_koko.okoubi!","text":"okoubi(epm, epv, epv_tmp, res)\n\nSolve the partitioned linear problem using the Okoubi and Koko method described in the paper available https://doi.org/10.1007/s11590-016-1020-x. This method avoid the allocation of epv_tmp and res.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_okoubi_koko.okoubi-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}}} where T","page":"Reference","title":"PartitionedStructures.M_okoubi_koko.okoubi","text":"okoubi(epm, epv)\n\nSolve the partitioned linear problem using the Okoubi and Koko method described in the paper available https://doi.org/10.1007/s11590-016-1020-x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_frontale.frontale!-Union{Tuple{Elemental_pm{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_frontale.frontale!","text":"frontale!(epm)\n\nProduce the Cholesky frontal factorization of the elemental partitioned matrix epm. The sparse factor L is stored in epm.L.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_1_parallel.subproblem-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Elemental_pv{T}, Vector{Int64}, Int64}} where T","page":"Reference","title":"PartitionedStructures.M_1_parallel.subproblem","text":"subproblem(epm_A, epv_b, epv_x, comp_list, i)\n\ndefine the subproblem which must be solve for the i-th variable\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_2_parallel.subproblem!-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Elemental_pv{T}, Int64, Vector{Bool}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.M_2_parallel.subproblem!","text":"subproblem(epm_A, epv_b, epv_x, comp_list, i)\n\ndefine the subproblem which must be solve for the i-th variable\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_3_parallel.subproblem3!-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Elemental_pv{T}, Int64, Vector{Bool}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.M_3_parallel.subproblem3!","text":"subproblem(epm_A, epv_b, epv_x, comp_list, i)\n\ndefine the subproblem which must be solve for the i-th variable\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Utils.BFGS-Union{Tuple{Y}, Tuple{Vector{Y}, Vector{Y}, Matrix{Y}}} where Y<:Number","page":"Reference","title":"PartitionedStructures.Utils.BFGS","text":"BFGS(s, y, B)\n\nPerform the BFGS update over the matrix B by using the vector s and y.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Utils.SR1-Union{Tuple{Y}, Tuple{Vector{Y}, Vector{Y}, Matrix{Y}}} where Y<:Number","page":"Reference","title":"PartitionedStructures.Utils.SR1","text":"SR1(s, y, B)\n\nPerform the BFGS update over the matrix B by using the vector s and y.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.eplom_lbfgs_from_epv-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Elemental_pv{Y}}","page":"Reference","title":"PartitionedStructures.Link.eplom_lbfgs_from_epv","text":"eplom_lbfgs_from_epv(epm)\n\nCreate an elemental partitioned linear operator matrix with the same partitioned structure than epv. Each elemental element linear operator is set with an LBFGS operator.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.eplom_lsr1_from_epv-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Elemental_pv{Y}}","page":"Reference","title":"PartitionedStructures.Link.eplom_lsr1_from_epv","text":"\t\teplom_lsr1_from_epv(epm)\n\nCreate an elemental partitioned linear operator matrix with the same partitioned structure than epv.   Each elemental element linear operator is set with an LSR1 operator.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.epm_from_epv-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Elemental_pv{Y}}","page":"Reference","title":"PartitionedStructures.Link.epm_from_epv","text":"epm_from_epv(epm)\n\nCreate an elemental partitioned matrix with the same partitioned structure than epv. Each elemental element matrix is set with an identity matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.epv_from_epm-Union{Tuple{T}, Tuple{Y}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.epv_from_epm","text":"epv_from_epm(epm)\n\nCreate an elemental partitioned vector with the same partitioned structure than epm.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.mul_epm_epv!-Union{Tuple{T}, Tuple{Y}, Tuple{Elemental_pv{Y}, T, Elemental_pv{Y}}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.mul_epm_epv!","text":"mul_epm_epv!(epv_res, epm, epv)\n\nCompute the product between the elemental partitioned matrix epm and the elemental partitioned vecto epv.\t The result is stored in the elemental partitioned vector epv_res.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.mul_epm_epv-Union{Tuple{T}, Tuple{Y}, Tuple{T, Elemental_pv{Y}}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.mul_epm_epv","text":"mul_epm_epv(epm, epv)\n\nCompute the product between the elemental partitioned matrix epm and the elemental partitioned vecto epv.\t\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.mul_epm_vector!-Union{Tuple{T}, Tuple{Y}, Tuple{Vector{Y}, T, Elemental_pv{Y}, Vector{Y}}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.mul_epm_vector!","text":"mul_epm_vector!(res, epm, epv, x)\n\nCompute the product between the elemental partitioned matrix epm and the vector x. The result is stored in the vector res.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.mul_epm_vector!-Union{Tuple{T}, Tuple{Y}, Tuple{Vector{Y}, T, Vector{Y}}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.mul_epm_vector!","text":"mul_epm_vector!(res, epm, x)\n\nCompute the product between the elemental partitioned matrix epm and the vector x. The result is stored in the vector res.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Link.mul_epm_vector-Union{Tuple{T}, Tuple{Y}, Tuple{T, Vector{Y}}} where {Y<:Number, T<:Part_mat{Y}}","page":"Reference","title":"PartitionedStructures.Link.mul_epm_vector","text":"mul_epm_vector(epm, x)\n\nCompute the product between the elemental partitioned matrix epm and the vector x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.PartitionedQuasiNewton.PBFGS_update-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.PartitionedQuasiNewton.PBFGS_update","text":"PBFGS_update(epm_B, s, epv_y)\n\nDefine the partitioned BFGS update of the partioned matrix epmB, given the step s and the element gradient difference epvy\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.PartitionedQuasiNewton.PSR1_update-Union{Tuple{T}, Tuple{Elemental_pm{T}, Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.PartitionedQuasiNewton.PSR1_update","text":"PSR1_update(epm_B, s, epv_y)\n\nDefine the partitioned SR1 update of the elemental partioned matrix epmB, given the step s and the element gradient difference epvy\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.PartitionedLOQuasiNewton.PLBFGS_update-Union{Tuple{T}, Tuple{Elemental_plom_bfgs{T}, Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.PartitionedLOQuasiNewton.PLBFGS_update","text":"PLBFGS_update(eplom_B, s, epv_y)\n\nDefine the partitioned LBFGS update of the partioned matrix eplomB, given the step s and the element gradient difference epvy\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.PartitionedLOQuasiNewton.PLSR1_update-Union{Tuple{T}, Tuple{Elemental_plom_sr1{T}, Elemental_pv{T}, Vector{T}}} where T","page":"Reference","title":"PartitionedStructures.PartitionedLOQuasiNewton.PLSR1_update","text":"PLSR1_update(eplom_B, s, epv_y)\n\nDefine the partitioned LSR1 update of the partioned matrix eplomB, given the step s and the element gradient difference epvy\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.PartitionedLOQuasiNewton.Part_update-Union{Tuple{Y}, Tuple{T}, Tuple{Y, Elemental_pv{T}, Vector{T}}} where {T, Y<:Part_LO_mat{T}}","page":"Reference","title":"PartitionedStructures.PartitionedLOQuasiNewton.Part_update","text":"Part_update(eplom_B, epv_y, s)\n\nPerform the partitionned update of eplomB. eplomB is build from LBFGS or LSR1 elemental element matrices. The update performed on eachh element matrix correspond to the linear operator associated.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_bfgs.Elemental_elom_bfgs","page":"Reference","title":"PartitionedStructures.ModElemental_elom_bfgs.Elemental_elom_bfgs","text":"Type that represents an elemental element linear operator LBFGS\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.ModElemental_elom_bfgs.LBFGS_eelom-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_bfgs.LBFGS_eelom","text":"LBFGS_eelom(nie, T=T, index=index)\n\nCreate a Elemental_elom_bfgs of type T of size nie, the indices are in the range index:index+nie-1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_bfgs.LBFGS_eelom_rand-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_bfgs.LBFGS_eelom_rand","text":"LBFGS_eelom_rand(nie, T=T, n=n)\n\nCreate a Elemental_elom_bfgs of type T with nie random indices within the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_bfgs.init_eelom_LBFGS-Tuple{Vector{Int64}}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_bfgs.init_eelom_LBFGS","text":"init_eelom_LBFGS(indices; T=T)\n\nDefine a Elemental_elom_bfgs of type Elemental_elom_sr1 based from the vector indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_bfgs.reset_eelom_bfgs!-Union{Tuple{Elemental_elom_bfgs{T}}, Tuple{T}} where T<:Number","page":"Reference","title":"PartitionedStructures.ModElemental_elom_bfgs.reset_eelom_bfgs!","text":"\treset_eelom_bfgs!(eelom)\n\nReset the LBFGS linear operator of the elemental element linear operator matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_bfgs.Elemental_plom_bfgs","page":"Reference","title":"PartitionedStructures.ModElemental_plom_bfgs.Elemental_plom_bfgs","text":"Type that represents an element partitioned matrix defined with elemental element linear operators LBFGS\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_abstract_part_struct.initialize_component_list!-Tuple{Elemental_plom_bfgs}","page":"Reference","title":"PartitionedStructures.M_abstract_part_struct.initialize_component_list!","text":"initialize_component_list!(eplom)\n\nBuild for each index i (∈ {1, ..., n}) the list of the blocs using i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.set_spm!-Union{Tuple{Elemental_plom_bfgs{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_part_mat.set_spm!","text":"set_spm!(eplom)\n\nBuild the sparse matrix eplom.spm from the blocs eplom.eelom_set, according to the indices of each elemental element linear operator matrice.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_bfgs.PLBFGS_eplom-Tuple{}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_bfgs.PLBFGS_eplom","text":"PLBFGS_eplom(N, n; type, nie)\n\nCreate an elemental partitionned limited memory of N elemental element linear operators matrices which are overlapping the next block coordinates by overlapping.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_bfgs.PLBFGS_eplom_rand-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_bfgs.PLBFGS_eplom_rand","text":"PLBFGS_eplom_rand(N, n; type, nie)\n\nCreate an elemental partitionned limited memory matrix of N elemental element linear operators matrices whose positions are random.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_bfgs.identity_eplom_LBFGS-Tuple{Vector{Vector{Int64}}, Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_bfgs.identity_eplom_LBFGS","text":"identity_eplom_LBFGS(vec_indices, N, n; T=T)\n\nCreate an elemental partitionned limited memory of N elemental element linear operators matrices whose the positions are given by vec_indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_sr1.Elemental_elom_sr1","page":"Reference","title":"PartitionedStructures.ModElemental_elom_sr1.Elemental_elom_sr1","text":"Type that represents elemental element linear operator LSR1\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.ModElemental_elom_sr1.LSR1_eelom-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_sr1.LSR1_eelom","text":"LSR1_eelom(nie, T=T, index=index)\n\nCreate a Elemental_elom_sr1 of type T of size nie, the indices are in the range index:index+nie-1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_sr1.LSR1_eelom_rand-Tuple{Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_sr1.LSR1_eelom_rand","text":"LSR1_eelom_rand(nie, T=T, n=n)\n\nCreate a Elemental_elom_sr1 of type T with nie random indices within the range 1:n.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_sr1.init_eelom_LSR1-Tuple{Vector{Int64}}","page":"Reference","title":"PartitionedStructures.ModElemental_elom_sr1.init_eelom_LSR1","text":"init_eelom_LSR1(indices; T=T)\n\nDefine a Elemental_elom_sr1 of type Elemental_elom_sr1 based from the vector indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_elom_sr1.reset_eelom_sr1!-Union{Tuple{Elemental_elom_sr1{T}}, Tuple{T}} where T<:Number","page":"Reference","title":"PartitionedStructures.ModElemental_elom_sr1.reset_eelom_sr1!","text":"\treset_eelom_sr1!(eelom)\n\nReset the LSR1 linear operator of the elemental element linear operator matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_sr1.Elemental_plom_sr1","page":"Reference","title":"PartitionedStructures.ModElemental_plom_sr1.Elemental_plom_sr1","text":"Type that represents an element partitioned matrix defined with elemental element linear operators LBFGS\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_abstract_part_struct.initialize_component_list!-Tuple{Elemental_plom_sr1}","page":"Reference","title":"PartitionedStructures.M_abstract_part_struct.initialize_component_list!","text":"initialize_component_list!(eplom)\n\nBuild for each index i (∈ {1, ..., n}) the list of the blocs using i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.set_spm!-Union{Tuple{Elemental_plom_sr1{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_part_mat.set_spm!","text":"set_spm!(eplom)\n\nBuild the sparse matrix eplom.spm from the blocs eplom.eelom_set, according to the indices of each elemental element linear operator matrice.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_sr1.PLSR1_eplom-Tuple{}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_sr1.PLSR1_eplom","text":"PLSR1_eplom(N, n; type, nie)\n\nCreate an elemental partitionned limited memory of N elemental element linear operators matrices which are overlapping the next block coordinates by overlapping.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_sr1.PLSR1_eplom_rand-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_sr1.PLSR1_eplom_rand","text":"PLSR1_eplom_rand(N, n; type, nie)\n\nCreate an elemental partitionned limited memory matrix of N elemental element linear operators matrices whose positions are random.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom_sr1.identity_eplom_LSR1-Tuple{Vector{Vector{Int64}}, Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_plom_sr1.identity_eplom_LSR1","text":"identity_eplom_LSR1(vec_indices, N, n; T=T)\n\nCreate an elemental partitionned limited memory of N elemental element linear operators matrices whose the positions are given by vec_indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom.Elemental_plom","page":"Reference","title":"PartitionedStructures.ModElemental_plom.Elemental_plom","text":"Type that represents an element partitioned matrix defined with elemental element linear operators LBFGS/LSR1\n\n\n\n\n\n","category":"type"},{"location":"reference/#PartitionedStructures.M_abstract_part_struct.initialize_component_list!-Tuple{Elemental_plom}","page":"Reference","title":"PartitionedStructures.M_abstract_part_struct.initialize_component_list!","text":"initialize_component_list!(eplom)\n\ninitializecomponentlist! Build for each index i (∈ {1,...,n}) the list of the blocs using i.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.M_part_mat.set_spm!-Union{Tuple{Elemental_plom{T}}, Tuple{T}} where T","page":"Reference","title":"PartitionedStructures.M_part_mat.set_spm!","text":"set_spm!(eplom)\n\nBuild the sparse matrix spm from the blocs eplom.eelom_set, according to the indices.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom.PLBFGSR1_eplom-Tuple{}","page":"Reference","title":"PartitionedStructures.ModElemental_plom.PLBFGSR1_eplom","text":"PLBFGS_eplom(N,n; type, nie) Create a a partitionned limited memory matrix of N LBFGSLinearOperators blocks whose overlap next block coordinates by overlapping.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.ModElemental_plom.PLBFGSR1_eplom_rand-Tuple{Int64, Int64}","page":"Reference","title":"PartitionedStructures.ModElemental_plom.PLBFGSR1_eplom_rand","text":"PLBFGSeplomrand(N,n; type, nie) Create a a partitionned limited memory matrix of N LBFGSLinearOperators blocs whose positions are randoms\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Instances.create_epv_eplom-Tuple{}","page":"Reference","title":"PartitionedStructures.Instances.create_epv_eplom","text":"create_epv_epm_rand(;n=n,nie=nie,overlpapping=overlapping, mul_m=mul_m, mul_v=mul_v)\n\nCreate a elemental partitioned vector and a random elemental partitioned matrix using linear operators LBFGS/LSR1 with the same partitioned structure defined by n,nie,overlapping,mul_l,mul_v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Instances.create_epv_eplom_bfgs-Tuple{}","page":"Reference","title":"PartitionedStructures.Instances.create_epv_eplom_bfgs","text":"create_epv_eplom_bfgs(;n=n,nie=nie,overlpapping=overlapping, mul_m=mul_m, mul_v=mul_v)\n\nCreate a elemental partitioned vector and a random elemental partitioned matrix using linear operators LBFGS with the same partitioned structure defined by n,nie,overlapping,mul_l,mul_v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Instances.create_epv_eplom_sr1-Tuple{}","page":"Reference","title":"PartitionedStructures.Instances.create_epv_eplom_sr1","text":"\tcreate_epv_eplom_bfgs(;n=n,nie=nie,overlpapping=overlapping, mul_m=mul_m, mul_v=mul_v)\n\nCreate a elemental partitioned vector and a random elemental partitioned matrix using linear operators LBFGS with the same partitioned structure defined by n,nie,overlapping,mul_l,mul_v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Instances.create_epv_epm-Tuple{}","page":"Reference","title":"PartitionedStructures.Instances.create_epv_epm","text":"create_epv_epm(;n=n,nie=nie,overlpapping=overlapping, mul_m=mul_m, mul_v=mul_v)\n\nCreate an elemental partitioned vector and a elemental partitioned matrix with the same partitioned structure defined by n,nie,overlapping,mul_l,mul_v.\n\n\n\n\n\n","category":"method"},{"location":"reference/#PartitionedStructures.Instances.create_epv_epm_rand-Tuple{}","page":"Reference","title":"PartitionedStructures.Instances.create_epv_epm_rand","text":"create_epv_epm_rand(;n=n,nie=nie,overlpapping=overlapping, mul_m=mul_m, mul_v=mul_v)\n\nCreate a random elemental partitioned vector and a random elemental partitioned matrix with the same partitioned structure defined by n,nie,overlapping,mul_l,mul_v.\n\n\n\n\n\n","category":"method"},{"location":"#PartitionedStructures.jl","page":"Home","title":"PartitionedStructures.jl","text":"","category":"section"},{"location":"tutorial/#PartitionedStructures.jl-Tutorial","page":"Tutorial","title":"PartitionedStructures.jl Tutorial","text":"","category":"section"}]
}
